{"version":3,"sources":["PaymentForm.js","App.js","reportWebVitals.js","index.js"],"names":["PaymentForm","stripe","useStripe","elements","useElements","handleSubmit","event","a","preventDefault","cardElement","getElement","CardElement","createPaymentMethod","type","card","error","paymentMethod","console","log","onSubmit","style","width","disabled","stripePromise","loadStripe","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oPAEMA,EAAc,WAClB,IAAMC,EAASC,sBACTC,EAAWC,wBAEXC,EAAY,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,yDAEnBD,EAAME,iBAEDP,GAAWE,EAJG,wDAabM,EAAcN,EAASO,WAAWC,eAbrB,SAgBoBV,EAAOW,oBAAoB,CAChEC,KAAM,OACNC,KAAML,IAlBW,gBAgBXM,EAhBW,EAgBXA,MAAOC,EAhBI,EAgBJA,cAKXD,EACFE,QAAQC,IAAI,UAAWH,GAEvBE,QAAQC,IAAI,kBAAmBF,GAxBd,4CAAH,sDA4BlB,OACE,uBAAMG,SAAUd,EAAce,MAAO,CAAEC,MAAO,SAA9C,UACE,cAAC,cAAD,IACA,wBAAQR,KAAK,SAASS,UAAWrB,EAAjC,qBCjCAsB,EAAgBC,YACpB,+GAsCaC,MApCf,WAIE,OACE,qBAAKC,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAAC,WAAD,CAAUzB,OAAQsB,EAAlB,SACE,cAAC,EAAD,WCHKI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.16e7b484.chunk.js","sourcesContent":["import { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\n\nconst PaymentForm = () => {\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleSubmit = async (event) => {\n    // Block native form submission.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      return;\n    }\n\n    // Get a reference to a mounted CardElement. Elements knows how\n    // to find your CardElement because there can only ever be one of\n    // each type of element.\n    const cardElement = elements.getElement(CardElement);\n\n    // Use your card Element with other Stripe.js APIs\n    const { error, paymentMethod } = await stripe.createPaymentMethod({\n      type: \"card\",\n      card: cardElement,\n    });\n\n    if (error) {\n      console.log(\"[error]\", error);\n    } else {\n      console.log(\"[PaymentMethod]\", paymentMethod);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} style={{ width: \"500px\" }}>\n      <CardElement />\n      <button type=\"submit\" disabled={!stripe}>\n        Pay\n      </button>\n    </form>\n  );\n};\n\nexport { PaymentForm };\n","import \"./App.css\";\nimport { Elements } from \"@stripe/react-stripe-js\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { PaymentForm } from \"./PaymentForm\";\nconst stripePromise = loadStripe(\n  \"pk_test_51IqNRkLO2AWV5vsOLmBBMvPufWwkRg00k07sfus3IKEjWEEFFt0ji5HBnFP2KsgDw7P2nXp1Ty4yfdRNpjaQjB0400n0gOaTCS\"\n);\nfunction App() {\n  // const handleSignUp = () => {\n  //   console.log(\"Signed up\");\n  // };\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Elements stripe={stripePromise}>\n          <PaymentForm />\n          {/* <form>\n            <div style={{ width: \"400px\", background: \"white\" }}>\n              <CardElement\n                options={{\n                  style: {\n                    base: {\n                      fontSize: \"16px\",\n                      color: \"#424770\",\n                      \"::placeholder\": {\n                        color: \"#aab7c4\",\n                      },\n                    },\n                    invalid: {\n                      color: \"#9e2146\",\n                    },\n                  },\n                }}\n              />\n            </div>\n            <button onClick={handleSignUp}>Sign up</button>\n          </form> */}\n        </Elements>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}